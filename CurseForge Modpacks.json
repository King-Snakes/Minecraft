{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2025-06-06T13:06:07-05:00",
  "name": "CurseForge Modpacks Test",
  "author": "MexicanKingSnakes@gmail.com",
  "description": "Support for CurseForge modpacks via the CurseForge API & required API key.",
  "features": [
    "eula",
    "java_version",
    "pid_limit"
  ],
  "docker_images": {
    "ghcr.io/king-snakes/multi-openjdk:JDK": "ghcr.io/king-snakes/multi-openjdk:JDK"
  },
  "file_denylist": [],
  "startup": "$(cat .startup)",
  "config": {
    "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\",\r\n            \"level-seed\": \"{{env.WORLD_SEED}}\",\r\n            \"motd\": \"{{env.MOTD}}\",\r\n            \"difficulty\": \"{{env.DIFFICULTY}}\",\r\n            \"resource-pack\": \"{{env.CUSTOM_TEXTUREPACK_URL}}\",\r\n            \"resource-pack-sha1\": \"{{env.CUSTOM_TEXTUREPACK_SHA1}}\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"For help, type \"\r\n}",
    "logs": "{}",
    "stop": "stop"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\r\nset -euo pipefail\r\n\r\n: \"${SERVER_DIR:=/mnt/server}\"\r\n: \"${TMP:=/mnt/server/tmp}\"\r\n: \"${MODPACK_NAME:=}\"\r\n: \"${MODPACK_ID:=}\"\r\nif [[ -z \"$MODPACK_NAME\" && -z \"$MODPACK_ID\" ]]; then\r\n  echo \"ERROR: MODPACK_NAME or MODPACK_ID must be set.\"\r\n  exit 1\r\nfi\r\n: \"${VERSION_ID:=}\"\r\n: \"${API_KEY:?Missing API_KEY}\"\r\n: \"${MOD_DOWNLOAD_THREADS:=4}\"\r\nCF_GAME_ID=432\r\nCF_CLASS_ID=4471\r\nCF_BASE_URL=\"https://api.curseforge.com/v1\"\r\n\r\n# ─── 0) CLEAN AND PREP ─────────────────────────────────────────────────────────\r\nrm -rf \"${SERVER_DIR:?}\"/* && cd \"$SERVER_DIR\"\r\n\r\nmkdir -p \"$SERVER_DIR/logs\"\r\nLOG_FILE=\"$SERVER_DIR/logs/install_$(date +%Y%m%d_%H%M%S).log\"\r\nexec > >(tee -a \"$LOG_FILE\") 2>&1\r\necho \"Logging to $LOG_FILE\"\r\n\r\nJVM_ARGS_FILE=\"$SERVER_DIR/user_jvm_args.txt\"\r\ndeclare -a RECOMMENDED_FLAGS=(\r\n  \"-Xms4G\"\r\n  \"-Xmx4G\"\r\n  \"-XX:+UseG1GC\"\r\n  \"-XX:MaxGCPauseMillis=100\"\r\n  \"-XX:+UseStringDeduplication\"\r\n  \"-Dfile.encoding=UTF-8\"\r\n)\r\n\r\nif [[ ! -f \"$JVM_ARGS_FILE\" ]]; then\r\n  echo \"Creating new user_jvm_args.txt with recommended JVM flags.\"\r\n  for flag in \"${RECOMMENDED_FLAGS[@]}\"; do\r\n    echo \"$flag\"\r\n  done > \"$JVM_ARGS_FILE\"\r\nelse\r\n  echo \"user_jvm_args.txt already exists; ensuring all recommended flags are present.\"\r\n  for flag in \"${RECOMMENDED_FLAGS[@]}\"; do\r\n    if ! grep -qxF \"$flag\" \"$JVM_ARGS_FILE\"; then\r\n      echo \"  → Adding missing flag: $flag\"\r\n      echo \"$flag\" >> \"$JVM_ARGS_FILE\"\r\n    fi\r\n  done\r\nfi\r\n\r\nget_modpack_id() {\r\n  [[ -n \"$MODPACK_ID\" ]] && return\r\n  if [[ -z \"$MODPACK_NAME\" ]]; then\r\n    echo \"ERROR: MODPACK_ID not set and MODPACK_NAME is empty.\"\r\n    return 1\r\n  fi\r\n  slug=$(echo \"$MODPACK_NAME\" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g; s/[^a-z0-9-]//g')\r\n  MODPACK_ID=$(curl -fsSL -H \"x-api-key: $API_KEY\" \\\r\n    \"$CF_BASE_URL/mods/search?gameId=$CF_GAME_ID&classId=$CF_CLASS_ID&slug=$slug\" \\\r\n    | jq -r '.data[0].id')\r\n  [[ -n \"$MODPACK_ID\" && \"$MODPACK_ID\" != \"null\" ]] && return\r\n\r\n  encoded=$(jq -sRr @uri <<< \"$MODPACK_NAME\")\r\n  for ((i=0; ; i+=50)); do\r\n    r=$(curl -fsSL -H \"x-api-key: $API_KEY\" \\\r\n      \"$CF_BASE_URL/mods/search?gameId=$CF_GAME_ID&classId=$CF_CLASS_ID&searchFilter=$encoded&sortField=TotalDownloads&sortOrder=desc&index=$i&pageSize=50\")\r\n    MODPACK_ID=$(jq -r --arg n \"$MODPACK_NAME\" \\\r\n      '.data[] | select(.name == $n) | .id' <<< \"$r\" | head -n1)\r\n    [[ -n \"$MODPACK_ID\" && \"$MODPACK_ID\" != \"null\" ]] && return\r\n    (( $(jq '.data | length' <<< \"$r\") < 50 )) && break\r\n  done\r\n\r\n  echo \"MODPACK NOT FOUND.\" && return 1\r\n}\r\n\r\nget_download() {\r\n  data=$(curl -fsSL -H \"x-api-key: $API_KEY\" \"$CF_BASE_URL/mods/$MODPACK_ID\")\r\n  [[ -z \"$VERSION_ID\" || \"$VERSION_ID\" == \"latest\" ]] && \\\r\n    VERSION_ID=$(jq -r '.data.mainFileId' <<< \"$data\")\r\n\r\n  file_data=$(curl -fsSL -H \"x-api-key: $API_KEY\" \\\r\n    \"$CF_BASE_URL/mods/$MODPACK_ID/files/$VERSION_ID\")\r\n  if [[ $(jq -r '.data.isServerPack' <<< \"$file_data\") == \"false\" ]]; then\r\n    VERSION_ID=$(jq -r '.data.serverPackFileId // empty' <<< \"$file_data\")\r\n  fi\r\n\r\n  download_url=$(curl -fsSL -H \"x-api-key: $API_KEY\" \\\r\n    \"$CF_BASE_URL/mods/$MODPACK_ID/files/$VERSION_ID/download-url\" \\\r\n    | jq -r '.data')\r\n  curl -sSL \"$download_url\" -o \"$SERVER_DIR/server.zip\"\r\n}\r\n\r\nget_loader() {\r\n  data=$(curl -fsSL -H \"x-api-key: $API_KEY\" \\\r\n    \"$CF_BASE_URL/mods/$MODPACK_ID/files/$VERSION_ID\")\r\n  if [[ $(jq -r '.data.isServerPack' <<< \"$data\") == \"true\" ]]; then\r\n    VERSION_ID=$(jq -r '.data.parentProjectFileId // empty' <<< \"$data\")\r\n  fi\r\n\r\n  client_url=$(curl -fsSL -H \"x-api-key: $API_KEY\" \\\r\n    \"$CF_BASE_URL/mods/$MODPACK_ID/files/$VERSION_ID/download-url\" \\\r\n    | jq -r '.data')\r\n  curl -sSL \"$client_url\" -o client.zip\r\n\r\n  unzip -jo client.zip manifest.json -d \"$SERVER_DIR\"\r\n  rm client.zip\r\n  mv \"$SERVER_DIR/manifest.json\" \"$SERVER_DIR/client.manifest.json\"\r\n\r\n  m=\"$SERVER_DIR/client.manifest.json\"\r\n  LOADER_ID=$(jq -r '.minecraft.modLoaders[] | select(.primary==true) | .id' \"$m\")\r\n  LOADER_NAME=\"${LOADER_ID%%-*}\"\r\n  LOADER_VERSION=\"${LOADER_ID#*-}\"\r\n  MINECRAFT_VERSION=$(jq -r '.minecraft.version' \"$m\")\r\n}\r\n\r\nget_java() {\n  case \"$MINECRAFT_VERSION\" in\n    1.(8|9|10|11)*) JAVA_VER=8 ;;\n    1.(12|13|14|15|16.[0-4])*) JAVA_VER=11 ;;\n    1.16.5) JAVA_VER=16 ;;\n    1.(17|18|19)*) JAVA_VER=17 ;;\n    1.(20|21|22|23)*) JAVA_VER=21 ;;\n    *) JAVA_VER=17; echo \"WARN: Unknown version $MINECRAFT_VERSION. Using Java 17.\" ;;\n  esac\n\r\n  JAVA_HOME=\"/opt/java/java$JAVA_VER\"\r\n  export JAVA_HOME\r\n  export PATH=\"$JAVA_HOME/bin:$PATH\"\r\n  echo \"Using Java $JAVA_VER from $JAVA_HOME\"\r\n  echo \"$JAVA_VER\" > \"$SERVER_DIR/.javaver\"\r\n  java -version || {\r\n    echo \"Java failed to start. Ensure the version exists in the image.\"\r\n    return 1\r\n  }\r\n}\r\n\r\njson_download_mods() {\r\n  echo \"DOWNLOADING MODS...\"\r\n  mkdir -p \"$SERVER_DIR/mods\"\r\n  jq -r '.files[] | select(.required) | \"\\( .projectID ) \\( .fileID )\"' \"$SERVER_DIR/manifest.json\" |\r\n  xargs -P \"$MOD_DOWNLOAD_THREADS\" -n2 bash -c '\r\n    modfile=\"'\"$SERVER_DIR\"'/mods/$2.jar\"\r\n    if [[ -f \"$modfile\" ]]; then\r\n      echo \"CACHED: $2\"\r\n      exit 0\r\n    fi\r\n    url=$(curl -sSL -H \"x-api-key: '\"$API_KEY\"'\" \\\r\n      \"https://api.curseforge.com/v1/mods/$1/files/$2/download-url\" \\\r\n      | jq -r \".data\")\r\n    curl -sSL \"$url\" -o \"$modfile\" && echo \"DOWNLOADED: $2\" || echo \"FAIL: $2\"\r\n  ' _\r\n}\r\n\r\ndownload_installer() {\r\n  local installer_path=\"$SERVER_DIR/$2\"\r\n  curl -fsSL -A \"Mozilla/5.0\" \"$1\" -o \"$installer_path\" || {\r\n    echo \"Failed to download $2\"\r\n    return 1\r\n  }\r\n  java -jar \"$installer_path\" ${3:-} || {\r\n    echo \"Failed to run $2\"\r\n    return 1\r\n  }\r\n  rm -f \"$installer_path\"\r\n}\r\n\r\njson_download_loader() {\r\n  echo \"INSTALLING ${LOADER_NAME^^}...\"\r\n  case \"$LOADER_NAME\" in\r\n    forge)\r\n      ver=\"${MINECRAFT_VERSION}-${LOADER_VERSION}\"\r\n      if [[ \"$MINECRAFT_VERSION\" =~ 1\\.(7\\.10|8\\.9) ]]; then\r\n        ver=\"${ver}-${MINECRAFT_VERSION}\"\r\n      fi\r\n      download_installer \\\r\n        \"https://maven.minecraftforge.net/net/minecraftforge/forge/${ver}/forge-${ver}-installer.jar\" \\\r\n        forge-installer.jar \"--installServer\"\r\n      LOADER_PATTERN=\"*forge-${ver}*.jar\"\r\n      ;;\r\n    neoforge)\r\n      a=\"neoforge\"\r\n      if [[ \"$LOADER_VERSION\" =~ 1.20.1- ]]; then\r\n        a=\"forge\"\r\n      fi\r\n      download_installer \\\r\n        \"https://maven.neoforged.net/releases/net/neoforged/${a}/${LOADER_VERSION}/${a}-${LOADER_VERSION}-installer.jar\" \\\r\n        neoforge-installer.jar \"--installServer\"\r\n      LOADER_PATTERN=\"*${a}-${LOADER_VERSION}*.jar\"\r\n      ;;\r\n    fabric)\r\n      url=$(curl -sSL https://meta.fabricmc.net/v2/versions/installer | jq -r '.[0].url')\r\n      download_installer \"$url\" fabric-installer.jar \\\r\n        \"server -mcversion $MINECRAFT_VERSION -loader $LOADER_VERSION -downloadMinecraft\"\r\n      LOADER_PATTERN=\"*fabric*-server*.jar\"\r\n      ;;\r\n    quilt)\r\n      url=$(curl -sSL https://meta.quiltmc.org/v3/versions/installer | jq -r '.[0].url')\r\n      download_installer \"$url\" quilt-installer.jar \\\r\n        \"install server $MINECRAFT_VERSION $LOADER_VERSION --download-server --install-dir=$SERVER_DIR\"\r\n      LOADER_PATTERN=\"*quilt*-server*.jar\"\r\n      ;;\r\n    *)\r\n      echo \"UNKNOWN LOADER: $LOADER_NAME\"\r\n      return 1\r\n      ;;\r\n  esac\r\n\r\n  unix_src=$(find \"$SERVER_DIR\" -type f -iname \"unix_args.txt\"       | head -n1)\r\n  user_src=$(find \"$SERVER_DIR\" -type f -iname \"user_jvm_args.txt\"   | head -n1)\r\n\r\n  if [[ -n \"$unix_src\" || -n \"$user_src\" ]]; then\r\n    echo \"Found JVM-args file(s):\"\r\n    startup_cmd=\"java\"\r\n    \r\n    if [[ -n \"$unix_src\" ]]; then\r\n      echo \"  → $unix_src\"\r\n      unix_runtime=\"${unix_src/#\\/mnt\\/server/\\/home\\/container}\"\r\n      startup_cmd+=\" @${unix_runtime}\"\r\n    fi\r\n\r\n    if [[ -n \"$user_src\" ]]; then\r\n      echo \"  → $user_src\"\r\n      user_runtime=\"${user_src/#\\/mnt\\/server/\\/home\\/container}\"\r\n      startup_cmd+=\" @${user_runtime}\"\r\n    fi\r\n\r\n    # nogui stays here (do NOT put \"nogui\" into user_jvm_args.txt)\r\n    startup_cmd+=\" nogui\"\r\n\r\n    echo \"$startup_cmd\" > \"$SERVER_DIR/.startup\"\r\n    return\r\n  fi\r\n\r\n  # 2) Otherwise, locate the loader JAR under /mnt/server\r\n  echo \"Looking for loader jar matching pattern: $LOADER_PATTERN\"\r\n  jar=$(find \"$SERVER_DIR\" -type f -iname \"$LOADER_PATTERN\" ! -iname \"*installer*\" | head -n1)\r\n  if [[ -n \"$jar\" ]]; then\r\n    echo \"Using loader jar at $jar; translating path for runtime.\"\r\n    runtime_jar=\"${jar/#\\/mnt\\/server/\\/home\\/container}\"\r\n    echo \"java -jar ${runtime_jar}\" > \"$SERVER_DIR/.startup\"\r\n  else\r\n    echo \"ERROR: Loader jar not found matching pattern $LOADER_PATTERN\"\r\n    return 1\r\n  fi\r\n}\r\n\r\ncleanup_tmp_files() {\r\n  mkdir -p \"$TMP\"\r\n  unzip -q \"$SERVER_DIR/server.zip\" -d \"$TMP\" || {\r\n    echo \"Failed to unzip server.zip\"\r\n    return 1\r\n  }\r\n  shopt -s dotglob\r\n  files=(\"$TMP\"/*)\r\n  if [[ ${#files[@]} -eq 0 ]]; then\r\n    echo \"No files extracted from server.zip\"\r\n    return 1\r\n  fi\r\n  if [[ -d \"${files[0]}\" && ${#files[@]} -eq 1 ]]; then\r\n    files=(\"${files[0]}\"/*)\r\n  fi\r\n  cp -ar \"${files[@]}\" \"$SERVER_DIR\" || {\r\n    echo \"Failed to copy extracted files\"\r\n    return 1\r\n  }\r\n  rm -rf \"$TMP\" \"$SERVER_DIR/server.zip\"\r\n}\r\n\r\ndownload_custom_mods() {\r\n  [[ -z \"${CUSTOM_MOD_URLS:-}\" ]] && return\r\n  IFS=',' read -ra URLS <<< \"$CUSTOM_MOD_URLS\"\r\n  mkdir -p \"$SERVER_DIR/mods\"\r\n  for url in \"${URLS[@]}\"; do\r\n    echo \"CUSTOM MOD: $url\"\r\n    curl -sSL -o \"$SERVER_DIR/mods/$(basename \"$url\")\" \"$url\" || \\\r\n      echo \"FAILED TO DOWNLOAD $url\"\r\n  done\r\n}\r\n\r\n# ─── EXECUTION FLOW ───────────────────────────────────────────────────────────────\r\nmain() {\r\n  get_modpack_id\r\n  get_download\r\n  get_loader\r\n  get_java\r\n  cd \"$SERVER_DIR\"\r\n  cleanup_tmp_files\r\n\r\n  [[ -f \"$SERVER_DIR/manifest.json\" ]] && json_download_mods\r\n  [[ -d \"$SERVER_DIR/overrides\" ]] && cp -r \"$SERVER_DIR/overrides/\"* \"$SERVER_DIR\" && rm -r \"$SERVER_DIR/overrides\"\r\n  [[ -f \"$SERVER_DIR/client.manifest.json\" ]] && json_download_loader\r\n\r\n  download_custom_mods\r\n  echo \"INSTALL COMPLETE.\"\r\n}\r\n\r\nmain \"$@\"\r\n\n",
      "container": "ghcr.io/king-snakes/multi-openjdk:JDK",
      "entrypoint": "install.sh"
    }
  },
  "variables": [
    {
      "name": "MODPACK NAME",
      "description": "SEARCH BY NAME, MAKE SURE NAME IS EXACT AS SHOWN AT: https://www.curseforge.com/minecraft/modpacks/",
      "env_variable": "MODPACK_NAME",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "MODPACK ID",
      "description": "SEARCH BY ID, MAKE SURE ID IS EXACT AS SHOWN AT: https://www.curseforge.com/minecraft/modpacks/",
      "env_variable": "MODPACK_ID",
      "default_value": "925200",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "MODPACK VERSION",
      "description": "SELECT MODPACK VERSION TO INSTALL, LEAVE BLANK TO USE LATEST",
      "env_variable": "VERSION_ID",
      "default_value": "latest",
      "user_viewable": true,
      "user_editable": true,
      "rules": "string",
      "field_type": "text"
    },
    {
      "name": "CURSEFORGE API KEY",
      "description": "CURSEFORGE API KEY IS REQUIRED - SEE: https://support.curseforge.com/en/support/solutions/articles/9000208346-about-the-curseforge-api-and-how-to-apply-for-a-key",
      "env_variable": "API_KEY",
      "default_value": "$2a$10$Pe78CsU2U9QuoK2r9ce1L.cRUxbqv4eLYXDEIdzrDWOHc49ihCfs.",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:60",
      "field_type": "text"
    },
    {
      "name": "MINECRAFT - WORLD SEED",
      "description": "SPECIFY WORLD SEED TO USE FOR THE SERVER",
      "env_variable": "WORLD_SEED",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "MINECRAFT - MOTD",
      "description": "SPECIFY MESSAGE OF THE DAY TO USE FOR THE SERVER",
      "env_variable": "MOTD",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "MINECRAFT - DIFFICULTY",
      "description": "SET THE DIFFICULTY LEVEL FOR THE SERVER (EASY, NORMAL, HARD)",
      "env_variable": "DIFFICULTY",
      "default_value": "hard",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "CUSTOM_TEXTUREPACK_URL",
      "description": "PROVIDE URL TO TEXTUREPACK",
      "env_variable": "CUSTOM_TEXTUREPACK_URL",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "CUSTOM TEXTUREPACK SHA1",
      "description": "SHA1 HASH OF CUSTOM TEXTUREPACK FOR CLIENT VALIDATION",
      "env_variable": "CUSTOM_TEXTUREPACK_SHA1",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "CUSTOM MOD URLS",
      "description": "PROVIDE COMMA-SEPARATED URLS FOR CUSTOM MODS TO BE INSTALL INTO THE MODS FOLDER",
      "env_variable": "CUSTOM_MOD_URLS",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    }
  ]
}
